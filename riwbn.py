import asyncio
import sys
import os
import logging
import aiohttp
import random
import json
import time
import re
from dotenv import load_dotenv
from typing import Union

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from functools import wraps

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
    BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    CHANNEL_ID = os.getenv("CHANNEL_ID")
    ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(',')))
    MODEL = "mistral-small"
    MAX_TOKENS = 1500
    TEMPERATURE = 0.8
    REQUEST_TIMEOUT = 25
    CALLBACK_TIMEOUT = 30

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°—Ç–µ–π—Ç—ã
class PostStates(StatesGroup):
    waiting_for_edit = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=Config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–µ–º –∫–æ—Å–º–µ—Ç–∏–∫–∏
COSMETIC_SUBTOPICS = [
    "–Ω–æ–≤–∏–Ω–∫–∏ –∫–æ—Å–º–µ—Ç–∏–∫–∏ 2024",
    "—É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –∑–∏–º–æ–π",
    "–∞–Ω—Ç–∏–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π",
    "–º–∞–∫–∏—è–∂ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏—Ü–∞",
    "–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –≤ –∫–æ—Å–º–µ—Ç–∏–∫–µ"
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏
def load_used_topics():
    try:
        with open('used_topics.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_used_topics(topics):
    with open('used_topics.json', 'w') as f:
        json.dump(topics, f)

def get_unique_subtopic():
    used = load_used_topics()
    available = [t for t in COSMETIC_SUBTOPICS if t not in used]
    
    if not available:
        available = COSMETIC_SUBTOPICS
        used = []
    
    subtopic = random.choice(available)
    used.append(subtopic)
    save_used_topics(used)
    return subtopic

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def post_actions_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ])

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
def admin_required(func):
    @wraps(func)
    async def wrapper(handler: Union[Message, CallbackQuery], *args, **kwargs):
        try:
            if isinstance(handler, CallbackQuery):
                message_time = handler.message.date.timestamp()
                if (time.time() - message_time) > Config.CALLBACK_TIMEOUT:
                    await handler.answer("‚åõ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!", show_alert=True)
                    return

            user_id = handler.from_user.id
            if user_id not in Config.ADMIN_IDS:
                msg = f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞—à ID: {user_id}"
                
                if isinstance(handler, Message):
                    await handler.answer(msg)
                elif isinstance(handler, CallbackQuery):
                    await handler.answer(msg, show_alert=True)
                
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {user_id}")
                return
            return await func(handler, *args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
    return wrapper

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è MarkdownV2
def escape_markdown(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# Mistral API –∫–ª–∏–µ–Ω—Ç
class MistralClient:
    def __init__(self):
        self.base_url = "https://api.mistral.ai/v1/chat/completions"
        self.session = aiohttp.ClientSession()

    async def generate_post(self, prompt: str) -> str:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {Config.MISTRAL_API_KEY}"
        }
        
        payload = {
            "model": Config.MODEL,
            "messages": [{"role": "user", "content": prompt}],
            "temperature": Config.TEMPERATURE,
            "max_tokens": Config.MAX_TOKENS
        }

        try:
            async with self.session.post(
                self.base_url,
                json=payload,
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=Config.REQUEST_TIMEOUT)
            ) as response:
                response.raise_for_status()
                data = await response.json()
                return escape_markdown(data['choices'][0]['message']['content'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Mistral API: {str(e)}")
            raise
        finally:
            await self.session.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
async def check_bot_permissions():
    try:
        chat_member = await bot.get_chat_member(
            chat_id=Config.CHANNEL_ID,
            user_id=(await bot.get_me()).id
        )
        logger.info(f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {chat_member}")
        return chat_member.can_post_messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
        return False

# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
@admin_required
async def cmd_start(message: Message):
    text = (
        "üåü <b>–ë–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ –æ –∫–æ—Å–º–µ—Ç–∏–∫–µ</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/post - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n"
        "/reset_topics - –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–µ–º\n"
        "/id - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID\n"
        "/test - –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    )
    await message.answer(text)

@dp.message(Command("id"))
async def get_id(message: Message):
    await message.answer(f"üÜî –í–∞—à ID: {message.from_user.id}")

@dp.message(Command("post"))
@admin_required
async def cmd_post(message: Message, state: FSMContext):
    try:
        mistral = MistralClient()
        msg = await message.answer("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞...")
        
        subtopic = get_unique_subtopic()
        
        prompt = (
            f"–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram –æ –∫–æ—Å–º–µ—Ç–∏–∫–µ. –¢–µ–º–∞: {subtopic}\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫—É\n"
            "- –•–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞\n"
            "- –ú–∞–∫—Å–∏–º—É–º 3 —ç–º–æ–¥–∑–∏\n"
            "- –ù–µ –±–æ–ª–µ–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
        post = await mistral.generate_post(prompt)
        await bot.delete_message(message.chat.id, msg.message_id)
        
        await state.update_data(generated_post=post)
        await message.answer(
            f"‚úÖ <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
            f"üè∑ <i>–¢–µ–º–∞:</i> {subtopic}\n"
            "üìù <i>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</i>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"{post}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=post_actions_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
    except asyncio.TimeoutError:
        await message.answer("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("reset_topics"))
@admin_required
async def cmd_reset_topics(message: Message):
    save_used_topics([])
    await message.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è —Ç–µ–º —Å–±—Ä–æ—à–µ–Ω–∞!")

@dp.callback_query(F.data.in_(["publish", "edit", "cancel"]))
@admin_required
async def handle_buttons(callback: CallbackQuery, state: FSMContext):
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {callback.data}")
        data = await state.get_data()
        post = data.get("generated_post")
        
        if not post:
            logger.error("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
            return

        await callback.answer()
        
        if callback.data == "publish":
            if not await check_bot_permissions():
                await callback.message.edit_text("‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!")
                return

            try:
                await bot.send_message(
                    chat_id=Config.CHANNEL_ID,
                    text=post,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                await callback.message.edit_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {post[:100]}...")
                
            except TelegramForbiddenError:
                error_msg = "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ!"
                await callback.message.edit_text(error_msg)
                logger.error("–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω")
                
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

        elif callback.data == "edit":
            await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
            await state.set_state(PostStates.waiting_for_edit)

        elif callback.data == "cancel":
            await callback.message.edit_text("üóë –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await state.clear()

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å")
            await callback.answer("‚åõ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫–ª–æ!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@dp.message(PostStates.waiting_for_edit)
@admin_required
async def handle_edit(message: Message, state: FSMContext):
    try:
        sanitized_text = escape_markdown(message.text)
        await bot.send_message(
            chat_id=Config.CHANNEL_ID,
            text=sanitized_text,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await message.answer("üì¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except TelegramForbiddenError:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

# –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
@dp.message(Command("test"))
@admin_required
async def cmd_test(message: Message):
    test_post = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç ‚ú®\n#—Ç–µ—Å—Ç #–±–æ—Ç–∞"
    try:
        await bot.send_message(
            chat_id=Config.CHANNEL_ID,
            text=escape_markdown(test_post),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())